from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import main_menu
from database import get_products, add_to_cart, get_cart, create_order, remove_from_cart

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"
@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_command(message: Message):
    await message.answer("–í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    products = get_products()
    for product in products:
        product_id, name, price = product
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{product_id}")],
            [InlineKeyboardButton(text="‚ûñ –£–±—Ä–∞—Ç—å", callback_data=f"remove_{product_id}")]
        ])
        await message.answer(f"{name} - {price}‚ÇΩ", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("add_") | F.data.startswith("remove_"))
async def update_cart_handler(callback: CallbackQuery):
    action, product_id = callback.data.split("_")
    product_id = int(product_id)

    if action == "add":
        add_to_cart(callback.from_user.id, product_id)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    elif action == "remove":
        remove_from_cart(callback.from_user.id, product_id)
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞" –∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@router.callback_query(F.data == "refresh_cart")  # –¢–µ–ø–µ—Ä—å –∫–æ—Ä–∑–∏–Ω—É –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–æ–π
async def cart_command(event):
    user_id = event.from_user.id if isinstance(event, CallbackQuery) else event.from_user.id
    chat_id = event.message.chat.id if isinstance(event, CallbackQuery) else event.chat.id

    cart_items = get_cart(user_id)

    if not cart_items:
        await event.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total_price = 0
        keyboard_buttons = []

        for name, quantity, price, product_id in cart_items:
            total_price += quantity * price
            cart_text += f"{name} ‚Äî {quantity} —à—Ç. √ó {price}‚ÇΩ = {quantity * price}‚ÇΩ\n"

            keyboard_buttons.append([
                InlineKeyboardButton(text="‚ûï", callback_data=f"add_{product_id}"),
                InlineKeyboardButton(text="‚ûñ", callback_data=f"remove_{product_id}")
            ])

        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –∏ "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="refresh_cart")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        if isinstance(event, CallbackQuery):  # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            await event.message.edit_text(cart_text, reply_markup=keyboard)
            await event.answer()
        else:  # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç "–ö–æ—Ä–∑–∏–Ω–∞"
            await event.answer(cart_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@router.callback_query(F.data == "checkout")
async def request_contact(callback: CallbackQuery):
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=contact_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.contact | F.text.regexp(r'^\+?\d{10,15}$'))
async def receive_contact(message: Message):
    phone_number = message.contact.phone_number if message.contact else message.text
    order_id = create_order(message.from_user.id)

    if order_id:
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É: {phone_number}.")
    else:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º.")